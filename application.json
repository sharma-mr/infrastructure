{
  "AWSTemplateFormatVersion":"2010-09-09",
  "Description":"CSYE 6225 Spring 2020 Create Network Infrastructure",
  "Parameters":{
     "appDomainName":{
        "Description":"Domain name for the host",
        "Type":"String"
     },
     "HostedZoneId":{
        "Description":"Zone Id for Route53",
        "Type":"String"
     },
     "s3BucketForCodeDeploy":{
        "Description":"S3 bucket for storing application to be deployed",
        "Type":"String"
     },
     "certificateArn":{
        "Description":"Certificate for SSL",
        "Type":"String"
     },
     "SQSQueueName":{
        "Description":"Name of SQS Queue",
        "Type":"String",
        "Default":"due-bill-queue"
     },
     "SenderEmail":{
        "Description":"Email id of receiver",
        "Type":"String",
        "Default":"donotreply@prod.sharmamrinal.me"
     },
     "vpccidrblock":{
        "Description":"cidrBlock for VPC",
        "Type":"String"
     },
     "subnetcidrblock":{
        "Description":"cidrBlock for subnet",
        "Type":"String"
     },
     "AWSRegion":{
        "Description":"AWS Region for the stack",
        "Type":"String"
     },
     "VPCName":{
        "Description":"VPC Name",
        "Type":"String"
     },
     "internetGateway":{
        "Description":"Internet Gateway",
        "Type":"String",
        "Default":"InternetGateway"
     },
     "routeTable":{
        "Description":"Route Table",
        "Type":"String",
        "Default":"RouteTable"
     },
     "subnet1":{
        "Description":"Subnet for VPC",
        "Type":"String",
        "Default":"vpcSubnet1"
     },
     "subnet2":{
        "Description":"Subnet for VPC",
        "Type":"String",
        "Default":"vpcSubnet2"
     },
     "subnet3":{
        "Description":"Subnet for VPC",
        "Type":"String",
        "Default":"vpcSubnet3"
     },
     "AMI":{
        "Description":"AMI ID/Name for EC2",
        "Type":"String"
     },
     "keyname":{
        "Description":"KeyName for the EC2",
        "Type":"String"
     },
     "ECInstanceType":{
        "Description":"InstanceType for EC2",
        "Type":"String",
        "Default":"t2.micro"
     },
     "EC2Instance":{
        "Description":"EC2 Name",
        "Type":"String",
        "Default":"EC2Instance"
     },
     "dbSecurityGroup":{
        "Description":"Database Security Group Name",
        "Type":"String",
        "Default":"csye6225-database-securitygroup"
     },
     "appSecurityGroup":{
        "Description":"Application Security Group Name",
        "Type":"String",
        "Default":"csye6225-application-securitygroup"
     },
     "dbName":{
        "Description":"RDS Database Name",
        "Type":"String",
        "Default":"csye6225"
     },
     "dbUserName":{
        "Description":"RDS DB User Name",
        "Type":"String",
        "Default":"dbuser"
     },
     "dbuserPassword":{
        "Description":"RDS DB UserPassword",
        "Type":"String",
        "Default":"dbuserPassword"
     },
     "dbIdentifier":{
        "Description":"RDS Name Identifier",
        "Type":"String",
        "Default":"csye6225-spring2020"
     },
     "myAppName":{
        "Default":"csye6225-webapp",
        "Description":"Name of my web application",
        "Type":"String"
     },
     "myDeployGroupName":{
        "Default":"csye6225-webapp-deployment",
        "Description":"Group Name for code deploy",
        "Type":"String"
     },
     "SNSTopic":{
        "Default":"DueBillEmailTopic",
        "Description":"Topic name for SNS",
        "Type":"String"
     }
  },
  "Resources":{
     "DynamoDB":{
        "Type":"AWS::DynamoDB::Table",
        "Properties":{
           "AttributeDefinitions":[
              {
                 "AttributeName":"id",
                 "AttributeType":"S"
              }
           ],
           "ProvisionedThroughput":{
              "ReadCapacityUnits":5,
              "WriteCapacityUnits":3
           },
           "TimeToLiveSpecification":{
              "AttributeName":"TTL",
              "Enabled":"TRUE"
           },
           "KeySchema":[
              {
                 "AttributeName":"id",
                 "KeyType":"HASH"
              }
           ],
           "TableName":"dynamoDBTable",
           "BillingMode":"PROVISIONED",
           "Tags":[
              {
                 "Key":"Name",
                 "Value":"dynamoDBTable"
              }
           ]
        }
     },
     "LambdaRole":{
        "Type":"AWS::IAM::Role",
        "Properties":{
           "AssumeRolePolicyDocument":{
              "Statement":[
                 {
                    "Action":[
                       "sts:AssumeRole"
                    ],
                    "Effect":"Allow",
                    "Principal":{
                       "Service":[
                          "lambda.amazonaws.com"
                       ]
                    }
                 }
              ],
              "Version":"2012-10-17"
           },
           "ManagedPolicyArns":[
              "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
              "arn:aws:iam::aws:policy/AmazonS3FullAccess",
              "arn:aws:iam::aws:policy/AmazonSESFullAccess",
              "arn:aws:iam::aws:policy/AmazonSNSFullAccess",
              "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
           ],
           "RoleName":"LambdaRole"
        }
     },
     "LambdaFunction":{
        "Type":"AWS::Lambda::Function",
        "Properties":{
           "Code":{
              "S3Bucket":{
                 "Ref":"s3BucketForCodeDeploy"
              },
              "S3Key":"serverless-0.0.1-SNAPSHOT.jar"
           },
           "Environment":{
              "Variables":{
                 "SenderEmail":{
                    "Ref":"SenderEmail"
                 }
              }
           },
           "FunctionName":"SendEmailOnSNS",
           "Handler":"com.csye6225.neu.serverless.event.EmailEvent::handleRequest",
           "MemorySize":256,
           "Role":{
              "Fn::GetAtt":[
                 "LambdaRole",
                 "Arn"
              ]
           },
           "Runtime":"java8",
           "Timeout":120
        }
     },
     "SNS":{
        "Type":"AWS::SNS::Topic",
        "Properties":{
           "TopicName":{
              "Ref":"SNSTopic"
           },
           "Subscription":[
              {
                 "Endpoint":{
                    "Fn::GetAtt":[
                       "LambdaFunction",
                       "Arn"
                    ]
                 },
                 "Protocol":"lambda"
              }
           ]
        }
     },
     "SNSLambdaPermission":{
        "Type":"AWS::Lambda::Permission",
        "Properties":{
           "Action":"lambda:*",
           "FunctionName":{
              "Fn::GetAtt":[
                 "LambdaFunction",
                 "Arn"
              ]
           },
           "Principal":"sns.amazonaws.com",
           "SourceArn":{
              "Ref":"SNS"
           }
        }
     },
     "SQSQueue":{
        "Type":"AWS::SQS::Queue",
        "Properties":{
           "MessageRetentionPeriod":864000,
           "VisibilityTimeout":30,
           "QueueName":{
              "Ref":"SQSQueueName"
           },
           "Tags":[
              {
                 "Key":"Name",
                 "Value":{
                    "Ref":"SQSQueueName"
                 }
              }
           ]
        }
     },
     "LambdaUpdate":{
        "Type":"AWS::IAM::Policy",
        "Properties":{
           "PolicyDocument":{
              "Version":"2012-10-17",
              "Statement":[
                 {
                    "Effect":"Allow",
                    "Action":[
                       "lambda:UpdateFunctionCode"
                    ],
                    "Resource":[
                       {
                          "Fn::Join":[
                             ":",
                             [
                                "arn:aws:lambda",
                                {
                                   "Ref":"AWS::Region"
                                },
                                {
                                   "Ref":"AWS::AccountId"
                                },
                                "function:SendEmailOnSNS"
                             ]
                          ]
                       }
                    ]
                 }
              ]
           },
           "PolicyName":"Update-Lambda-CircleCI",
           "Users":[
              "circleci"
           ]
        }
     },
     "Webapp":{
        "Type":"AWS::CodeDeploy::Application",
        "Properties":{
           "ApplicationName":{
              "Ref":"myAppName"
           },
           "ComputePlatform":"Server"
        }
     },
     "ApplicationDeploymentGroup":{
        "Type":"AWS::CodeDeploy::DeploymentGroup",
        "DependsOn":"CodeDeployServiceRole",
        "Properties":{
           "ApplicationName":{
              "Ref":"Webapp"
           },
           "DeploymentGroupName":{
              "Ref":"myDeployGroupName"
           },
           "AutoScalingGroups":[
              {
                 "Ref":"WebServerGroup"
              }
           ],
           "LoadBalancerInfo":{
              "TargetGroupInfoList":[
                 {
                    "Name":{
                       "Fn::GetAtt":[
                          "TargetGroup",
                          "TargetGroupName"
                       ]
                    }
                 }
              ]
           },
           "DeploymentStyle":{
              "DeploymentType":"IN_PLACE",
              "DeploymentOption":"WITH_TRAFFIC_CONTROL"
           },
           "DeploymentConfigName":"CodeDeployDefault.AllAtOnce",
           "Ec2TagFilters":[
              {
                 "Key":"Name",
                 "Value":"EC2Instance",
                 "Type":"KEY_AND_VALUE"
              }
           ],
           "AutoRollbackConfiguration":{
              "Enabled":"true",
              "Events":[
                 "DEPLOYMENT_FAILURE"
              ]
           },
           "ServiceRoleArn":{
              "Fn::GetAtt":[
                 "CodeDeployServiceRole",
                 "Arn"
              ]
           }
        }
     },
     "ApplicationLoadBalancer":{
        "Type":"AWS::ElasticLoadBalancingV2::LoadBalancer",
        "Properties":{
           "IpAddressType":"ipv4",
           "SecurityGroups":[
              {
                 "Ref":"loadbalancerSecurityGroup"
              }
           ],
           "Subnets":[
              {
                 "Ref":"PublicSubnet1"
              },
              {
                 "Ref":"PublicSubnet2"
              },
              {
                 "Ref":"PublicSubnet3"
              }
           ],
           "Name":"ApplicationLoadBalancer",
           "Scheme":"internet-facing",
           "Type":"application"
        }
     },
     "Route53RecordSet":{
        "Type":"AWS::Route53::RecordSet",
        "Properties":{
           "Name":{
              "Ref":"appDomainName"
           },
           "HostedZoneId":{
              "Ref":"HostedZoneId"
           },
           "AliasTarget":{
              "HostedZoneId":{
                 "Fn::GetAtt":[
                    "ApplicationLoadBalancer",
                    "CanonicalHostedZoneID"
                 ]
              },
              "DNSName":{
                 "Fn::GetAtt":[
                    "ApplicationLoadBalancer",
                    "DNSName"
                 ]
              }
           },
           "Type":"A"
        }
     },
     "LoadBalancerListener":{
        "Type":"AWS::ElasticLoadBalancingV2::Listener",
        "Properties":{
           "DefaultActions":[
              {
                 "Type":"forward",
                 "TargetGroupArn":{
                    "Ref":"TargetGroup"
                 }
              }
           ],
           "LoadBalancerArn":{
              "Ref":"ApplicationLoadBalancer"
           },
           "Port":443,
           "Protocol":"HTTPS",
           "Certificates":[
              {
                 "CertificateArn":{
                    "Ref":"certificateArn"
                 }
              }
           ]
        }
     },
     "myVPC":{
        "Type":"AWS::EC2::VPC",
        "Properties":{
           "CidrBlock":{
              "Ref":"vpccidrblock"
           },
           "EnableDnsSupport":"true",
           "EnableDnsHostnames":"true",
           "Tags":[
              {
                 "Key":"Name",
                 "Value":{
                    "Ref":"VPCName"
                 }
              }
           ]
        }
     },
     "PublicSubnet1":{
        "Type":"AWS::EC2::Subnet",
        "Properties":{
           "AvailabilityZone":{
              "Fn::Select":[
                 0,
                 {
                    "Fn::GetAZs":{
                       "Ref":"AWSRegion"
                    }
                 }
              ]
           },
           "VpcId":{
              "Ref":"myVPC"
           },
           "CidrBlock":{
              "Fn::Select":[
                 0,
                 {
                    "Fn::Cidr":[
                       {
                          "Ref":"subnetcidrblock"
                       },
                       3,
                       14
                    ]
                 }
              ]
           },
           "Tags":[
              {
                 "Key":"Name",
                 "Value":{
                    "Fn::Join":[
                       "-",
                       [
                          {
                             "Ref":"subnet1"
                          },
                          {
                             "Ref":"VPCName"
                          }
                       ]
                    ]
                 }
              }
           ]
        }
     },
     "PublicSubnet2":{
        "Type":"AWS::EC2::Subnet",
        "Properties":{
           "AvailabilityZone":{
              "Fn::Select":[
                 1,
                 {
                    "Fn::GetAZs":{
                       "Ref":"AWSRegion"
                    }
                 }
              ]
           },
           "VpcId":{
              "Ref":"myVPC"
           },
           "CidrBlock":{
              "Fn::Select":[
                 1,
                 {
                    "Fn::Cidr":[
                       {
                          "Ref":"subnetcidrblock"
                       },
                       3,
                       14
                    ]
                 }
              ]
           },
           "Tags":[
              {
                 "Key":"Name",
                 "Value":{
                    "Fn::Join":[
                       "-",
                       [
                          {
                             "Ref":"subnet2"
                          },
                          {
                             "Ref":"VPCName"
                          }
                       ]
                    ]
                 }
              }
           ]
        }
     },
     "PublicSubnet3":{
        "Type":"AWS::EC2::Subnet",
        "Properties":{
           "AvailabilityZone":{
              "Fn::Select":[
                 2,
                 {
                    "Fn::GetAZs":{
                       "Ref":"AWSRegion"
                    }
                 }
              ]
           },
           "VpcId":{
              "Ref":"myVPC"
           },
           "CidrBlock":{
              "Fn::Select":[
                 2,
                 {
                    "Fn::Cidr":[
                       {
                          "Ref":"subnetcidrblock"
                       },
                       3,
                       14
                    ]
                 }
              ]
           },
           "Tags":[
              {
                 "Key":"Name",
                 "Value":{
                    "Fn::Join":[
                       "-",
                       [
                          {
                             "Ref":"subnet3"
                          },
                          {
                             "Ref":"VPCName"
                          }
                       ]
                    ]
                 }
              }
           ]
        }
     },
     "InternetGateway":{
        "Type":"AWS::EC2::InternetGateway",
        "Properties":{
           "Tags":[
              {
                 "Key":"Name",
                 "Value":{
                    "Fn::Join":[
                       "-",
                       [
                          {
                             "Ref":"internetGateway"
                          },
                          {
                             "Ref":"VPCName"
                          }
                       ]
                    ]
                 }
              }
           ]
        }
     },
     "GatewayAttachment":{
        "Type":"AWS::EC2::VPCGatewayAttachment",
        "Properties":{
           "VpcId":{
              "Ref":"myVPC"
           },
           "InternetGatewayId":{
              "Ref":"InternetGateway"
           }
        }
     },
     "RouteTable":{
        "Type":"AWS::EC2::RouteTable",
        "Properties":{
           "VpcId":{
              "Ref":"myVPC"
           },
           "Tags":[
              {
                 "Key":"Name",
                 "Value":{
                    "Fn::Join":[
                       "-",
                       [
                          {
                             "Ref":"routeTable"
                          },
                          {
                             "Ref":"VPCName"
                          }
                       ]
                    ]
                 }
              }
           ]
        }
     },
     "subnet1RouteTableAssociation":{
        "Type":"AWS::EC2::SubnetRouteTableAssociation",
        "Properties":{
           "SubnetId":{
              "Ref":"PublicSubnet1"
           },
           "RouteTableId":{
              "Ref":"RouteTable"
           }
        }
     },
     "subnet2RouteTableAssociation":{
        "Type":"AWS::EC2::SubnetRouteTableAssociation",
        "Properties":{
           "SubnetId":{
              "Ref":"PublicSubnet2"
           },
           "RouteTableId":{
              "Ref":"RouteTable"
           }
        }
     },
     "subnet3RouteTableAssociation":{
        "Type":"AWS::EC2::SubnetRouteTableAssociation",
        "Properties":{
           "SubnetId":{
              "Ref":"PublicSubnet3"
           },
           "RouteTableId":{
              "Ref":"RouteTable"
           }
        }
     },
     "RouteName":{
        "Type":"AWS::EC2::Route",
        "Properties":{
           "RouteTableId":{
              "Ref":"RouteTable"
           },
           "DestinationCidrBlock":"0.0.0.0/0",
           "GatewayId":{
              "Ref":"InternetGateway"
           }
        }
     },
     "loadbalancerSecurityGroup":{
        "Type":"AWS::EC2::SecurityGroup",
        "Properties":{
           "GroupName":"LoadBalancer-Security-Group",
           "GroupDescription":"Security group for load balancer",
           "VpcId":{
              "Ref":"myVPC"
           },
           "SecurityGroupIngress":[
              {
                 "IpProtocol":"tcp",
                 "FromPort":80,
                 "ToPort":80,
                 "CidrIp":"0.0.0.0/0"
              },
              {
                 "IpProtocol":"tcp",
                 "FromPort":443,
                 "ToPort":443,
                 "CidrIp":"0.0.0.0/0"
              },
              {
                 "IpProtocol":"tcp",
                 "FromPort":8080,
                 "ToPort":8080,
                 "CidrIp":"0.0.0.0/0"
              }
           ]
        }
     },
     "applicationSecurityGroup":{
        "Type":"AWS::EC2::SecurityGroup",
        "Properties":{
           "GroupDescription":"Security group for EC2 server",
           "GroupName":"csye6225-securitygroup",
           "SecurityGroupIngress":[
              {
                 "IpProtocol":"tcp",
                 "FromPort":22,
                 "ToPort":22,
                 "CidrIp":"0.0.0.0/0"
              },
              {
                 "IpProtocol":"tcp",
                 "FromPort":8080,
                 "ToPort":8080,
                 "SourceSecurityGroupId":{
                    "Fn::GetAtt":[
                       "loadbalancerSecurityGroup",
                       "GroupId"
                    ]
                 }
              }
           ],
           "Tags":[
              {
                 "Key":"Name",
                 "Value":{
                    "Ref":"appSecurityGroup"
                 }
              }
           ],
           "VpcId":{
              "Ref":"myVPC"
           }
        }
     },
     "databaseSecurityGroup":{
        "Type":"AWS::EC2::SecurityGroup",
        "Properties":{
           "GroupDescription":"SecurityGroup for RDS",
           "GroupName":"csye6225-database-securitygroup",
           "SecurityGroupIngress":[
              {
                 "IpProtocol":"tcp",
                 "FromPort":"3306",
                 "ToPort":"3306",
                 "SourceSecurityGroupId":{
                    "Ref":"applicationSecurityGroup"
                 }
              }
           ],
           "Tags":[
              {
                 "Key":"Name",
                 "Value":{
                    "Ref":"dbSecurityGroup"
                 }
              }
           ],
           "VpcId":{
              "Ref":"myVPC"
           }
        }
     },
     "AttachmentPolicy":{
        "Type":"AWS::IAM::ManagedPolicy",
        "Properties":{
           "ManagedPolicyName":"Attachment-Policy",
           "Description":"Policy for uploading attachments",
           "PolicyDocument":{
              "Version":"2012-10-17",
              "Statement":[
                 {
                    "Action":[
                       "s3:GetObject",
                       "s3:DeleteObject",
                       "s3:PutObject"
                    ],
                    "Effect":"Allow",
                    "Resource":[
                       {
                          "Fn::Join":[
                             "",
                             [
                                "arn:aws:s3:::",
                                {
                                   "Ref":"S3Bucket"
                                }
                             ]
                          ]
                       },
                       {
                          "Fn::Join":[
                             "",
                             [
                                "arn:aws:s3:::",
                                {
                                   "Ref":"S3Bucket"
                                },
                                "/*"
                             ]
                          ]
                       }
                    ]
                 }
              ]
           }
        }
     },
     "CircleCIEC2AMI":{
        "Properties":{
           "PolicyDocument":{
              "Statement":[
                 {
                    "Action":[
                       "ec2:AttachVolume",
                       "ec2:AuthorizeSecurityGroupIngress",
                       "ec2:CopyImage",
                       "ec2:CreateImage",
                       "ec2:CreateKeypair",
                       "ec2:CreateSecurityGroup",
                       "ec2:CreateSnapshot",
                       "ec2:CreateTags",
                       "ec2:CreateVolume",
                       "ec2:DeleteKeyPair",
                       "ec2:DeleteSecurityGroup",
                       "ec2:DeleteSnapshot",
                       "ec2:DeleteVolume",
                       "ec2:DeregisterImage",
                       "ec2:DescribeImageAttribute",
                       "ec2:DescribeImages",
                       "ec2:DescribeInstances",
                       "ec2:DescribeInstanceStatus",
                       "ec2:DescribeRegions",
                       "ec2:DescribeSecurityGroups",
                       "ec2:DescribeSnapshots",
                       "ec2:DescribeSubnets",
                       "ec2:DescribeTags",
                       "ec2:DescribeVolumes",
                       "ec2:DetachVolume",
                       "ec2:GetPasswordData",
                       "ec2:ModifyImageAttribute",
                       "ec2:ModifyInstanceAttribute",
                       "ec2:ModifySnapshotAttribute",
                       "ec2:RegisterImage",
                       "ec2:RunInstances",
                       "ec2:StopInstances",
                       "ec2:TerminateInstances"
                    ],
                    "Effect":"Allow",
                    "Resource":"*"
                 }
              ],
              "Version":"2012-10-17"
           },
           "PolicyName":"circleci-ec2-ami",
           "Users":[
              "circleci"
           ]
        },
        "Type":"AWS::IAM::Policy"
     },
     "CircleCICodeDeploy":{
        "Properties":{
           "PolicyDocument":{
              "Statement":[
                 {
                    "Action":[
                       "codedeploy:RegisterApplicationRevision",
                       "codedeploy:GetApplicationRevision"
                    ],
                    "Effect":"Allow",
                    "Resource":[
                       {
                          "Fn::Join":[
                             ":",
                             [
                                "arn:aws:codedeploy",
                                {
                                   "Ref":"AWS::Region"
                                },
                                {
                                   "Ref":"AWS::AccountId"
                                },
                                "application:csye6225-webapp"
                             ]
                          ]
                       }
                    ]
                 },
                 {
                    "Action":[
                       "codedeploy:CreateDeployment",
                       "codedeploy:GetDeployment"
                    ],
                    "Effect":"Allow",
                    "Resource":[
                       "*"
                    ]
                 },
                 {
                    "Action":[
                       "codedeploy:GetDeploymentConfig"
                    ],
                    "Effect":"Allow",
                    "Resource":[
                       {
                          "Fn::Join":[
                             ":",
                             [
                                "arn:aws:codedeploy",
                                {
                                   "Ref":"AWS::Region"
                                },
                                {
                                   "Ref":"AWS::AccountId"
                                },
                                "deploymentconfig",
                                "CodeDeployDefault.AllAtOnce"
                             ]
                          ]
                       }
                    ]
                 }
              ],
              "Version":"2012-10-17"
           },
           "PolicyName":"CircleCI-Code-Deploy",
           "Users":[
              "circleci"
           ]
        },
        "Type":"AWS::IAM::Policy"
     },
     "CircleCIUploadToS3":{
        "Type":"AWS::IAM::Policy",
        "Properties":{
           "PolicyDocument":{
              "Statement":[
                 {
                    "Action":[
                       "s3:Get*",
                       "s3:List*",
                       "s3:PutObject"
                    ],
                    "Effect":"Allow",
                    "Resource":{
                       "Fn::Join":[
                          "",
                          [
                             "arn:aws:s3:::",
                             {
                                "Ref":"s3BucketForCodeDeploy"
                             },
                             "/*"
                          ]
                       ]
                    }
                 }
              ],
              "Version":"2012-10-17"
           },
           "PolicyName":"CircleCI-Upload-To-S3",
           "Users":[
              "circleci"
           ]
        }
     },
     "CodeDeployEC2S3":{
        "Type":"AWS::IAM::ManagedPolicy",
        "Properties":{
           "ManagedPolicyName":"CodeDeploy-EC2-S3",
           "PolicyDocument":{
              "Version":"2012-10-17",
              "Statement":[
                 {
                    "Action":[
                       "s3:Get*",
                       "s3:List*"
                    ],
                    "Effect":"Allow",
                    "Resource":[
                       {
                          "Fn::Join":[
                             "",
                             [
                                "arn:aws:s3:::",
                                {
                                   "Ref":"s3BucketForCodeDeploy"
                                },
                                "/*"
                             ]
                          ]
                       }
                    ]
                 }
              ]
           }
        }
     },
     "CodeDeployEC2ServiceRole":{
        "Type":"AWS::IAM::Role",
        "Properties":{
           "AssumeRolePolicyDocument":{
              "Statement":[
                 {
                    "Action":[
                       "sts:AssumeRole"
                    ],
                    "Effect":"Allow",
                    "Principal":{
                       "Service":[
                          "ec2.amazonaws.com"
                       ]
                    }
                 }
              ],
              "Version":"2012-10-17"
           },
           "ManagedPolicyArns":[
              "arn:aws:iam::aws:policy/AmazonSNSFullAccess",
              "arn:aws:iam::aws:policy/AmazonSQSFullAccess",
              "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
              {
                 "Ref":"AttachmentPolicy"
              },
              {
                 "Ref":"CodeDeployEC2S3"
              }
           ],
           "RoleName":"CodeDeployEC2ServiceRole"
        }
     },
     "CodeDeployServiceRole":{
        "Properties":{
           "AssumeRolePolicyDocument":{
              "Statement":[
                 {
                    "Action":[
                       "sts:AssumeRole"
                    ],
                    "Effect":"Allow",
                    "Principal":{
                       "Service":[
                          "codedeploy.amazonaws.com"
                       ]
                    }
                 }
              ],
              "Version":"2012-10-17"
           },
           "ManagedPolicyArns":[
              "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
           ],
           "RoleName":"CodeDeployServiceRole"
        },
        "Type":"AWS::IAM::Role"
     },
     "S3Bucket":{
        "Type":"AWS::S3::Bucket",
        "Properties":{
           "AccessControl":"Private",
           "BucketEncryption":{
              "ServerSideEncryptionConfiguration":[
                 {
                    "ServerSideEncryptionByDefault":{
                       "SSEAlgorithm":"AES256"
                    }
                 }
              ]
           },
           "LifecycleConfiguration":{
              "Rules":[
                 {
                    "Id":"ShiftIn30Days",
                    "Status":"Enabled",
                    "Transition":{
                       "TransitionInDays":"30",
                       "StorageClass":"STANDARD_IA"
                    }
                 }
              ]
           }
        }
     },
     "DBSubnetGroup":{
        "Type":"AWS::RDS::DBSubnetGroup",
        "Properties":{
           "DBSubnetGroupDescription":"DBSubnet Group for RDS",
           "SubnetIds":[
              {
                 "Ref":"PublicSubnet1"
              },
              {
                 "Ref":"PublicSubnet2"
              },
              {
                 "Ref":"PublicSubnet3"
              }
           ]
        }
     },
     "RDSDBInstance":{
        "Type":"AWS::RDS::DBInstance",
        "Properties":{
           "Engine":"MySQL",
           "DBInstanceClass":"db.t3.micro",
           "MultiAZ":false,
           "DBInstanceIdentifier":{
              "Ref":"dbIdentifier"
           },
           "DBParameterGroupName": {
            "Ref": "ParamGroupForRDS"
          },
           "MasterUsername":{
              "Ref":"dbUserName"
           },
           "MasterUserPassword":{
              "Ref":"dbuserPassword"
           },
           "PubliclyAccessible":false,
           "DBName":{
              "Ref":"dbName"
           },
           "DBSubnetGroupName":{
              "Ref":"DBSubnetGroup"
           },
           "VPCSecurityGroups":[
              {
                 "Ref":"databaseSecurityGroup"
              }
           ],
           "AllocatedStorage":"10",
           "StorageEncrypted":true
        }
     },
     "ParamGroupForRDS": {
      "Type": "AWS::RDS::DBParameterGroup",
      "Properties": {
        "Family": "MySQL5.7",
        "Description": "Database Parameter Group for RDS Instance ",
        "Parameters": {
          "performance_schema": "1"
        }
      }
    },
     "EC2InstanceProfile":{
        "Properties":{
           "Path":"/",
           "Roles":[
              {
                 "Ref":"CodeDeployEC2ServiceRole"
              }
           ]
        },
        "Type":"AWS::IAM::InstanceProfile"
     },
     "LaunchConfiguration":{
        "Type":"AWS::AutoScaling::LaunchConfiguration",
        "Properties":{
           "UserData":{
              "Fn::Base64":{
                 "Fn::Join":[
                    "",
                    [
                       "#!/bin/bash \n",
                       "set -e -x \n",
                       "sudo echo CURRENT_PROFILE=aws >> /etc/profile.d/envvariable.sh \n",
                       "sudo echo export CURRENT_PROFILE >> /etc/profile.d/envvariable.sh",
                       "sudo echo DBCreationType=update >> /etc/profile.d/envvariable.sh \n",
                       "sudo echo export DBCreationType >> /etc/profile.d/envvariable.sh \n",
                       "sudo echo CURRENT_PROFILE=aws >> /etc/profile.d/envvariable.sh \n",
                       {
                          "Fn::Sub":"sudo echo appDomainName=${appDomainName} >> /etc/profile.d/envvariable.sh \n"
                       },
                       "sudo echo export appDomainName >> /etc/profile.d/envvariable.sh \n",
                       {
                          "Fn::Sub":"sudo echo DB_USER=${dbUserName} >> /etc/profile.d/envvariable.sh \n"
                       },
                       "sudo echo export DB_USER >> /etc/profile.d/envvariable.sh \n",
                       {
                          "Fn::Sub":"sudo echo DB_PASSWORD=${dbuserPassword} >> /etc/profile.d/envvariable.sh \n"
                       },
                       "sudo echo export DB_PASSWORD >> /etc/profile.d/envvariable.sh \n",
                       {
                          "Fn::Join":[
                             "",
                             [
                                "echo awsRDS=jdbc:mysql://",
                                {
                                   "Fn::GetAtt":[
                                      "RDSDBInstance",
                                      "Endpoint.Address"
                                   ]
                                },
                                {
                                   "Fn::Sub":":3306/${dbName} >> /etc/profile.d/envvariable.sh \n"
                                }
                             ]
                          ]
                       },
                       {
                          "Fn::Join":[
                             "",
                             [
                                "sudo echo bucketName=",
                                {
                                   "Ref":"S3Bucket"
                                },
                                ">> /etc/profile.d/envvariable.sh \n"
                             ]
                          ]
                       },
                       {
                          "Fn::Join":[
                             "",
                             [
                                "sudo echo rdsUrl=",
                                {
                                   "Fn::GetAtt":[
                                      "RDSDBInstance",
                                      "Endpoint.Address"
                                   ]
                                },
                                ">> /etc/profile.d/envvariable.sh \n"
                             ]
                          ]
                       },
                       {
                          "Fn::Join":[
                             ":",
                             [
                                "echo topicArn=arn:aws:sns",
                                {
                                   "Ref":"AWS::Region"
                                },
                                {
                                   "Ref":"AWS::AccountId"
                                },
                                "DueBillEmailTopic >> /etc/profile.d/envvariable.sh \n"
                             ]
                          ]
                       },
                       "sudo echo export awsRDS >> /etc/profile.d/envvariable.sh \n",
                       "sudo echo export bucketName >> /etc/profile.d/envvariable.sh \n",
                       "sudo echo export rdsUrl >> /etc/profile.d/envvariable.sh \n",
                       "sudo echo export topicArn >> /etc/profile.d/envvariable.sh \n"
                    ]
                 ]
              }
           },
           "ImageId":{
              "Ref":"AMI"
           },
           "KeyName":{
              "Ref":"keyname"
           },
           "SecurityGroups":[
              {
                 "Ref":"applicationSecurityGroup"
              }
           ],
           "LaunchConfigurationName":"LaunchConfiguration",
           "InstanceType":"t2.micro",
           "AssociatePublicIpAddress":true,
           "BlockDeviceMappings":[
              {
                 "DeviceName":"/dev/sdm",
                 "Ebs":{
                    "VolumeType":"gp2",
                    "DeleteOnTermination":"true",
                    "VolumeSize":"20"
                 }
              }
           ],
           "IamInstanceProfile":{
              "Ref":"EC2InstanceProfile"
           }
        }
     },
     "TargetGroup":{
        "Type":"AWS::ElasticLoadBalancingV2::TargetGroup",
        "Properties":{
           "HealthCheckIntervalSeconds":5,
           "HealthCheckPath":"/",
           "HealthCheckPort":"8080",
           "HealthCheckProtocol":"HTTP",
           "HealthCheckTimeoutSeconds":2,
           "HealthyThresholdCount":2,
           "Name":"TargetGroup",
           "Port":8080,
           "Protocol":"HTTP",
           "TargetType":"instance",
           "UnhealthyThresholdCount":2,
           "VpcId":{
              "Ref":"myVPC"
           },
           "Matcher":{
              "HttpCode":"200,400,401,405"
           }
        }
     },
     "WebServerGroup":{
        "Type":"AWS::AutoScaling::AutoScalingGroup",
        "Properties":{
           "LaunchConfigurationName":{
              "Ref":"LaunchConfiguration"
           },
           "MinSize":"2",
           "MaxSize":"5",
           "TargetGroupARNs":[
              {
                 "Ref":"TargetGroup"
              }
           ],
           "Tags":[
              {
                 "Key":"Name",
                 "Value":"EC2Instance",
                 "PropagateAtLaunch":"True"
              }
           ],
           "DesiredCapacity":"2",
           "Cooldown":300,
           "VPCZoneIdentifier":[
              {
                 "Ref":"PublicSubnet1"
              },
              {
                 "Ref":"PublicSubnet2"
              },
              {
                 "Ref":"PublicSubnet3"
              }
           ]
        }
     },
     "WebServerScaleUpPolicy":{
        "Type":"AWS::AutoScaling::ScalingPolicy",
        "Properties":{
           "AdjustmentType":"ChangeInCapacity",
           "AutoScalingGroupName":{
              "Ref":"WebServerGroup"
           },
           "Cooldown":"300",
           "ScalingAdjustment":"1"
        }
     },
     "WebServerScaleDownPolicy":{
        "Type":"AWS::AutoScaling::ScalingPolicy",
        "Properties":{
           "AdjustmentType":"ChangeInCapacity",
           "AutoScalingGroupName":{
              "Ref":"WebServerGroup"
           },
           "Cooldown":"300",
           "ScalingAdjustment":"-1"
        }
     },
     "CPUAlarmHigh":{
        "Type":"AWS::CloudWatch::Alarm",
        "Properties":{
           "AlarmDescription":"Scale-up if CPU > 10% for 10 minutes",
           "MetricName":"CPUUtilization",
           "Namespace":"AWS/EC2",
           "Statistic":"Average",
           "Period":"300",
           "EvaluationPeriods":"2",
           "Threshold":"10",
           "AlarmActions":[
              {
                 "Ref":"WebServerScaleUpPolicy"
              }
           ],
           "Dimensions":[
              {
                 "Name":"AutoScalingGroupName",
                 "Value":{
                    "Ref":"WebServerGroup"
                 }
              }
           ],
           "ComparisonOperator":"GreaterThanThreshold"
        }
     },
     "CPUAlarmLow":{
        "Type":"AWS::CloudWatch::Alarm",
        "Properties":{
           "AlarmDescription":"Scale-down if CPU < 5% for 10 minutes",
           "MetricName":"CPUUtilization",
           "Namespace":"AWS/EC2",
           "Statistic":"Average",
           "Period":"300",
           "EvaluationPeriods":"2",
           "Threshold":"5",
           "AlarmActions":[
              {
                 "Ref":"WebServerScaleDownPolicy"
              }
           ],
           "Dimensions":[
              {
                 "Name":"AutoScalingGroupName",
                 "Value":{
                    "Ref":"WebServerGroup"
                 }
              }
           ],
           "ComparisonOperator":"LessThanThreshold"
        }
     }
  }
}